#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Script version
VERSION="1.0.0"

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to print header
print_header() {
    echo
    print_color "$CYAN" "╔════════════════════════════════════════╗"
    print_color "$CYAN" "║     Ollama Docker Management CLI       ║"
    print_color "$CYAN" "║            Version $VERSION            ║"
    print_color "$CYAN" "╚════════════════════════════════════════╝"
    echo
}

# Function to check if running as root
check_root() {
    if [ "$EUID" -eq 0 ]; then
        return 0
    else
        return 1
    fi
}

# Function to show quick status
show_quick_status() {
    echo
    print_color "$BOLD" "Current Status:"
    echo "───────────────"
    
    # API Token
    if [ -f ".env" ]; then
        print_color "$GREEN" "✓ API Token: Configured"
    else
        print_color "$RED" "✗ API Token: Not configured"
    fi
    
    # Docker
    if command -v docker &> /dev/null; then
        print_color "$GREEN" "✓ Docker: Installed"
    else
        print_color "$RED" "✗ Docker: Not installed"
    fi
    
    # Docker Containers
    if docker ps 2>/dev/null | grep -q ollama; then
        print_color "$GREEN" "✓ Ollama Container: Running"
    else
        print_color "$RED" "✗ Ollama Container: Not running"
    fi
    
    # Systemd Services
    if [ -f /etc/systemd/system/ollama-docker.service ]; then
        print_color "$GREEN" "✓ Systemd Autostart: Configured"
    else
        print_color "$YELLOW" "○ Systemd Autostart: Not configured"
    fi
    
    # Tailscale
    if command -v tailscale &> /dev/null; then
        print_color "$GREEN" "✓ Tailscale: Installed"
    else
        print_color "$YELLOW" "○ Tailscale: Not installed"
    fi
    
    # Tailscale Funnel Service
    if [ -f /etc/systemd/system/ollama-tailscale-funnel.service ]; then
        print_color "$GREEN" "✓ Tailscale Funnel: Configured"
    else
        print_color "$YELLOW" "○ Tailscale Funnel: Not configured"
    fi
    
    echo
}

# Function to show main menu
show_main_menu() {
    print_color "$BOLD" "Main Menu:"
    echo "──────────"
    echo "1) Setup & Installation"
    echo "2) Status & Monitoring"
    echo "3) Service Management"
    echo "4) Updates & Maintenance"
    echo "5) Models Management"
    echo "6) Help & Documentation"
    echo "0) Exit"
    echo
    read -p "Select an option: " main_choice
}

# Function to show setup menu
show_setup_menu() {
    clear
    print_header
    print_color "$BOLD" "Setup & Installation"
    echo "────────────────────"
    echo "1) Basic Docker setup (creates API token)"
    echo "2) Enable autostart on boot"
    echo "3) Enable Tailscale Funnel + autostart"
    echo "4) Run complete setup wizard"
    echo "0) Back to main menu"
    echo
    read -p "Select an option: " choice
    
    case $choice in
        1)
            print_color "$CYAN" "Running basic Docker setup..."
            ./setup.sh
            read -p "Press Enter to continue..."
            ;;
        2)
            if check_root; then
                print_color "$CYAN" "Enabling autostart on boot..."
                ./systemd-setup.sh
            else
                print_color "$YELLOW" "This option requires root access."
                echo "Please run: sudo ./ollama-cli"
            fi
            read -p "Press Enter to continue..."
            ;;
        3)
            if check_root; then
                print_color "$CYAN" "Enabling Tailscale Funnel with autostart..."
                ./tailscale-setup.sh
            else
                print_color "$YELLOW" "This option requires root access."
                echo "Please run: sudo ./ollama-cli"
            fi
            read -p "Press Enter to continue..."
            ;;
        4)
            run_setup_wizard
            ;;
        0)
            return
            ;;
    esac
}

# Function to run setup wizard
run_setup_wizard() {
    clear
    print_header
    print_color "$BOLD" "Setup Wizard"
    echo "─────────────"
    echo
    
    # Step 1: Basic setup
    print_color "$CYAN" "Step 1: Basic Docker Setup"
    echo "This will create an API token and start Docker containers."
    read -p "Continue? (y/n): " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        ./setup.sh
    fi
    
    # Step 2: Autostart
    echo
    print_color "$CYAN" "Step 2: Autostart Configuration"
    echo "Would you like Ollama to start automatically on boot?"
    read -p "Enable autostart? (y/n): " autostart
    
    if [[ "$autostart" =~ ^[Yy]$ ]]; then
        # Check for Tailscale
        if command -v tailscale &> /dev/null; then
            echo "Tailscale is installed. Would you like to enable Tailscale Funnel?"
            read -p "Enable Tailscale Funnel? (y/n): " funnel
            
            if [[ "$funnel" =~ ^[Yy]$ ]]; then
                if check_root; then
                    ./tailscale-setup.sh
                else
                    print_color "$YELLOW" "Root access required. Please run: sudo ./ollama-cli"
                fi
            else
                if check_root; then
                    ./systemd-setup.sh
                else
                    print_color "$YELLOW" "Root access required. Please run: sudo ./ollama-cli"
                fi
            fi
        else
            if check_root; then
                ./systemd-setup.sh
            else
                print_color "$YELLOW" "Root access required. Please run: sudo ./ollama-cli"
            fi
        fi
    fi
    
    # Step 3: Test
    echo
    print_color "$CYAN" "Step 3: Testing Installation"
    read -p "Would you like to test the API? (y/n): " test_api
    if [[ "$test_api" =~ ^[Yy]$ ]]; then
        ./test.sh
    fi
    
    echo
    print_color "$GREEN" "✓ Setup wizard complete!"
    read -p "Press Enter to continue..."
}

# Function to show status menu
show_status_menu() {
    clear
    print_header
    print_color "$BOLD" "Status & Monitoring"
    echo "────────────────────"
    echo "1) Quick status overview"
    echo "2) Detailed system status"
    echo "3) Test API connectivity"
    echo "4) View container logs"
    echo "5) View service logs (systemd)"
    echo "0) Back to main menu"
    echo
    read -p "Select an option: " choice
    
    case $choice in
        1)
            show_quick_status
            read -p "Press Enter to continue..."
            ;;
        2)
            ./status.sh
            read -p "Press Enter to continue..."
            ;;
        3)
            ./test.sh
            read -p "Press Enter to continue..."
            ;;
        4)
            print_color "$CYAN" "Showing last 50 lines of container logs..."
            docker logs --tail 50 ollama
            read -p "Press Enter to continue..."
            ;;
        5)
            if check_root; then
                if [ -f /etc/systemd/system/ollama-docker.service ]; then
                    print_color "$CYAN" "Ollama Docker Service Logs:"
                    journalctl -u ollama-docker.service --no-pager -n 20
                fi
                if [ -f /etc/systemd/system/ollama-tailscale-funnel.service ]; then
                    echo
                    print_color "$CYAN" "Tailscale Funnel Service Logs:"
                    journalctl -u ollama-tailscale-funnel.service --no-pager -n 20
                fi
            else
                print_color "$YELLOW" "Viewing systemd logs requires root access."
                echo "Please run: sudo ./ollama-cli"
            fi
            read -p "Press Enter to continue..."
            ;;
        0)
            return
            ;;
    esac
}

# Function to show service management menu
show_service_menu() {
    clear
    print_header
    print_color "$BOLD" "Service Management"
    echo "───────────────────"
    echo "1) Start services"
    echo "2) Stop services"
    echo "3) Restart services"
    echo "4) Restart with systemd reload"
    echo "0) Back to main menu"
    echo
    read -p "Select an option: " choice
    
    case $choice in
        1)
            print_color "$CYAN" "Starting services..."
            docker compose up -d
            print_color "$GREEN" "✓ Services started"
            read -p "Press Enter to continue..."
            ;;
        2)
            print_color "$CYAN" "Stopping services..."
            docker compose down
            print_color "$GREEN" "✓ Services stopped"
            read -p "Press Enter to continue..."
            ;;
        3)
            print_color "$CYAN" "Restarting services..."
            ./restart.sh
            read -p "Press Enter to continue..."
            ;;
        4)
            if check_root; then
                print_color "$CYAN" "Restarting with systemd reload..."
                ./restart.sh
            else
                print_color "$YELLOW" "Systemd operations require root access."
                echo "Please run: sudo ./ollama-cli"
            fi
            read -p "Press Enter to continue..."
            ;;
        0)
            return
            ;;
    esac
}

# Function to show update menu
show_update_menu() {
    clear
    print_header
    print_color "$BOLD" "Updates & Maintenance"
    echo "──────────────────────"
    echo "1) Update to latest version"
    echo "2) Pull latest Docker images"
    echo "3) Update Git repository"
    echo "4) Clean unused Docker resources"
    echo "5) Uninstall everything"
    echo "0) Back to main menu"
    echo
    read -p "Select an option: " choice
    
    case $choice in
        1)
            print_color "$CYAN" "Updating to latest version..."
            ./update.sh
            read -p "Press Enter to continue..."
            ;;
        2)
            print_color "$CYAN" "Pulling latest Docker images..."
            docker compose pull
            docker compose up -d
            print_color "$GREEN" "✓ Images updated"
            read -p "Press Enter to continue..."
            ;;
        3)
            print_color "$CYAN" "Updating Git repository..."
            git pull
            print_color "$GREEN" "✓ Repository updated"
            read -p "Press Enter to continue..."
            ;;
        4)
            print_color "$CYAN" "Cleaning unused Docker resources..."
            docker system prune -f
            print_color "$GREEN" "✓ Cleanup complete"
            read -p "Press Enter to continue..."
            ;;
        5)
            print_color "$RED" "WARNING: This will remove all Ollama components!"
            read -p "Are you sure? (type 'yes' to confirm): " confirm
            if [ "$confirm" = "yes" ]; then
                if check_root; then
                    ./uninstall.sh
                else
                    print_color "$YELLOW" "Uninstall requires root access."
                    echo "Please run: sudo ./ollama-cli"
                fi
            else
                print_color "$YELLOW" "Uninstall cancelled"
            fi
            read -p "Press Enter to continue..."
            ;;
        0)
            return
            ;;
    esac
}

# Function to show models menu
show_models_menu() {
    clear
    print_header
    print_color "$BOLD" "Models Management"
    echo "─────────────────"
    
    # Check if container is running
    if ! docker ps | grep -q ollama; then
        print_color "$RED" "Ollama container is not running!"
        echo "Please start the services first."
        read -p "Press Enter to continue..."
        return
    fi
    
    echo "1) List installed models"
    echo "2) Pull a new model"
    echo "3) Remove a model"
    echo "4) Run a model interactively"
    echo "0) Back to main menu"
    echo
    read -p "Select an option: " choice
    
    case $choice in
        1)
            print_color "$CYAN" "Installed models:"
            echo "─────────────────"
            docker exec ollama ollama list
            read -p "Press Enter to continue..."
            ;;
        2)
            print_color "$CYAN" "Popular models:"
            echo "• gemma3:1b - Small, fast model"
            echo "• phi4:latest - Microsoft's Phi-4 model"
            echo "• llama2:7b - Meta's Llama 2 7B"
            echo "• mistral:7b - Mistral 7B"
            echo "• codellama:7b - Code-focused model"
            echo
            read -p "Enter model name to pull (or press Enter to cancel): " model
            if [ -n "$model" ]; then
                print_color "$CYAN" "Pulling $model..."
                docker exec -it ollama ollama pull "$model"
                print_color "$GREEN" "✓ Model pulled successfully"
            fi
            read -p "Press Enter to continue..."
            ;;
        3)
            docker exec ollama ollama list
            echo
            read -p "Enter model name to remove (or press Enter to cancel): " model
            if [ -n "$model" ]; then
                print_color "$YELLOW" "Removing $model..."
                docker exec ollama ollama rm "$model"
                print_color "$GREEN" "✓ Model removed"
            fi
            read -p "Press Enter to continue..."
            ;;
        4)
            docker exec ollama ollama list
            echo
            read -p "Enter model name to run (or press Enter to cancel): " model
            if [ -n "$model" ]; then
                print_color "$CYAN" "Starting interactive session with $model..."
                print_color "$YELLOW" "Type /bye to exit"
                docker exec -it ollama ollama run "$model"
            fi
            ;;
        0)
            return
            ;;
    esac
}

# Function to show help
show_help() {
    clear
    print_header
    print_color "$BOLD" "Help & Documentation"
    echo "────────────────────"
    echo
    print_color "$CYAN" "Quick Start Guide:"
    echo "1. Run './ollama-cli' to start the interactive menu"
    echo "2. Select 'Setup & Installation' for first-time setup"
    echo "3. Use 'Status & Monitoring' to check system health"
    echo "4. Use 'Service Management' to control services"
    echo
    print_color "$CYAN" "Command Line Options:"
    echo "  ollama-cli              - Start interactive menu"
    echo "  ollama-cli status       - Show quick status"
    echo "  ollama-cli setup        - Run setup wizard"
    echo "  ollama-cli update       - Update to latest version"
    echo "  ollama-cli restart      - Restart all services"
    echo "  ollama-cli help         - Show this help"
    echo "  ollama-cli version      - Show version"
    echo
    print_color "$CYAN" "Tips:"
    echo "• Run with 'sudo' for system-level operations"
    echo "• Your API token is preserved during updates"
    echo "• Check './status.sh' for detailed diagnostics"
    echo "• Use './test.sh' to verify API connectivity"
    echo
    print_color "$CYAN" "For more information:"
    echo "• README.md - Full documentation"
    echo "• GitHub: https://github.com/haikucode-dev/x1-docker-ollama"
    echo
    read -p "Press Enter to continue..."
}

# Main program logic
main() {
    # Handle command line arguments
    case "${1:-}" in
        status)
            show_quick_status
            exit 0
            ;;
        setup)
            run_setup_wizard
            exit 0
            ;;
        update)
            ./update.sh
            exit 0
            ;;
        restart)
            ./restart.sh
            exit 0
            ;;
        help|--help|-h)
            show_help
            exit 0
            ;;
        version|--version|-v)
            echo "Ollama Docker Management CLI v$VERSION"
            exit 0
            ;;
        "")
            # No arguments, show interactive menu
            ;;
        *)
            print_color "$RED" "Unknown command: $1"
            echo "Use 'ollama-cli help' for usage information"
            exit 1
            ;;
    esac
    
    # Interactive menu loop
    while true; do
        clear
        print_header
        show_quick_status
        show_main_menu
        
        case $main_choice in
            1)
                show_setup_menu
                ;;
            2)
                show_status_menu
                ;;
            3)
                show_service_menu
                ;;
            4)
                show_update_menu
                ;;
            5)
                show_models_menu
                ;;
            6)
                show_help
                ;;
            0)
                print_color "$GREEN" "Goodbye!"
                exit 0
                ;;
            *)
                print_color "$RED" "Invalid option"
                sleep 1
                ;;
        esac
    done
}

# Run main program
main "$@"